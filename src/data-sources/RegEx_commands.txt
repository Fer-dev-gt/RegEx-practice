\w - caracteres de palabras
\d - digitos
\s - espacios/invisibles en blanco
[0-9] ~ \d
[0-9a-zA-Z] ~ \w
* greedy - todo - cero o más
+ uno o más
? cero o más 


Haciendo que los Match sean lo más pequeños posible (not greedy) usando el (?) como delimitador 
.+?,


Para que haga Match al final de la línea donde hay un final de linea
.+?[,\n]{1,1}


Todas las lineas que no empiecen con un digíto
^[^\d].*$


Patron con clases creadas por nosotros para encontrar diferente formatos de número de teléfono
Estos 2 patrones capturan los mismos resultados
\d{2,2}[\-\.\s]?
(\d{2,2}[\.\-\s\n]?){5,5}


Para encontrar el formato de una IP V4
(\.?\d{1,3}){4,4}
(\d\.?{1,3}){4,4}
(\d{1,3}\.){3,3}(\d{1,3})


Para encontrar el formado ideal de número de teléfonos con signos especiales de seperación Menos letras
(\d{2}[^a-z]?){5}


Una contraseña de 8 a 15 caracteres con minimo una minuscula, mayuscula y un digito
((?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,15}) 


Para hacer Match con un LOG en especifico
^\[LOG.*\[WARN\].*$


Haciendo Match con todos los LOG que hicieron un @usuario
^\[LOG.*\[LOG\].*user:@\w+?\] .*$


Para buscar líneas sobre métodos HTTP
^.*((GET)|(POST)|(PUT)|(DELETE)).*$


Para buscar líneas con fechas en el formato día(numero)/mes(nombre)/año(numero):
^.*(\d{1,2}\/\w+\/\d{4,4}).*$


Que les parece la siguiente expresión para obtener los logs que empiecen con una ip y sean solicitudes de tipo POST
^\d{2,3}\.\d{2,3}\.\d{2,3}\.\d{2,3}.*POST.*$


Para numero de telefono de 6 digitos separados por espacios o caracteres especificos menos letras con opcion a extensiones
^(\+?\d{2,3}[^\da-z]?){2,3}[#pe]?\d+$
^(\+?\d{2,3}[\W]?){2,3}[#pe]?\d+$
^\+?(\d+[ \.\-pe#]?)+$


Para hace match todas las URLs que empiecen con http y otras condiciones
https?:\/\/[\w\-\.]+\.\w{2,5}\/?\S*


Solo hace match de una URL hasta el TLD (Top Level Domain) like .com, .gt
https?:\/\/[\w\-\.]+\.\w{2,5}


Selecciona los "Query String"
https?:\/\/[\w\-\.]+\.\w{2,5}\/?\S*\?\w+-?=.*&?\S$


mail incompleto, solo dominios
@[\w\.\-]{3,}\.\w{2,5}


Hace Match a un formato especifico de email (Puede varias segun el provedor de email como gmail, yahoo, outlook)
[\w\._]{5,30}\+?[\w]{0,10}@[\w\.\-]{3,}\.\w{2,5}
[\w_]{5,30}\+?[\w]{0,10}@[\w\.\-]{3,}\.\w{2,5}


Coordenadas de longitud, latidus y elevación
(-?\d{1,3}\.\d{1,6},\s?){2,2}.*
(-?\d{1,3}\.\d{1,6},? ?){3}


Coordenadas en radianes
^-?\d{1,3}\s\d{1,2}'\s\d{1,3}\.\d{2,2}"[WE],\s?-?\d{1,3}\s\d{1,2}'\s\d{1,3}\.\d{2,2}"[SN]$
^(-?\d{1,3} '?\d{1,2}' \d{1,2}\.\d{1,2}"[WNES],? ?){2}$


Coordenadas transformadas a palabras random
^([a-z]{3,}\.?){3,3}


Formato simple para nombres en español
[A-ZÀ-ú][a-zÀ-ú]+\s[A-ZÀ-ú][a-zÀ-ú]+((\s[A-ZÀ-ú][a-zÀ-ú]+){1,})?
^[A-Z][a-z]{2,}\s?[A-Z]?[a-z]{0,}


Formato que hace Match con nombres de peliculas con su id y categorias
^\d+::([\w\s'&!:,\(\)\.\-\/]+)\s\((\d{4,4})\)::.*
^\d+::(.*)\s\((\d{4})\)::.*$                  

Para reemplazar con los grupos del comando de arriba colocamos en el espacio de replace:
$1,$2


Para colocar los valores que hizo Match en un formato de SQL al usar las agrupaciones y "$
insert into movies (year, title) values($2, '$1')


Para hacer un reemplazo y darle formato JSON a los Matches de las peliculas usando "$
{title: "$1", year:$2},


Forma PRO de Agrupar y Transformar manteniendo los géneros de las peliculas del .csv
^\d+::(.*) \((\d{4})\)::([\w\-]*)\|?([\w\-]*)\|?([\w\-]*)\|?([\w\-]*)\|?([\w\-]*)

Reemplazamos y damos el a las agrupaciones que hicimos formato con este comando
{title: '$1', year: $2, genres: {$3, $4, $5, $6, $7}}


Comando para separar los "query parameters" de una URL y hacerles Match
[\?&](\w+)=([^&\n]+)

Formato para la transformación del Match del "query parameter"
\n - $1=$2


Para hacer Match con los partidos que se jugaron en Febrero "02" usando el lenguaje de programación Perl
m/^[\d]{4,4}\-02\-.*$/


Expresion de agrupacion para mostrar solo los partidos donde gano el equipo visitante y su expresión de agrupación, hecho en Perl
m/^[\d]{4,4}.*?,(.*?),(.*?),(\d+),(\d+),.*$/
printf("%s (%d) - (%d) %s\n",      $1, $3, $4, $2)


Le agregamos el año en que se realizo el partido y su expresión de agrupación
m/^([\d]{4,4})\-.*?,(.*?),(.*?),(\d+),(\d+),.*$/
printf("%s: %s (%d) - (%d) %s\n",      $1, $2, $4, $5, $3)



Formato incompleto para hacer match con los paises (no caputura todos)
'/^(\d{4}\-\d\d\-\d\d),([\w\s\-]+),([\w\s\-]+),(\d+),(\d+),.*$/i', 

Este formato caputura todos los paises pero puede ser algo peligroso por que acepta casi todo
'/^(\d{4}\-\d\d\-\d\d),(.+),(.+),(\d+),(\d+),.*$/i', 

Regex para hacer match con la totalidad de los datos
'/^(\d{4,4}\-\d\d\-\d\d),([\w\-\.\ ñáéíóúçã&]+),([\w\-\.\ ñáéíóúçã&]+),(\d+),(\d+),.*$/i'